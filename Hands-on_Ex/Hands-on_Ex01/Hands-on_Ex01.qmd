---
title: "Hands-on Exercise 1"
author: "Brian Lim"
date: "August 16, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## **1.1 Exercise Overview**

In this hands-on exercise, I learnt of how to perform geospatial data science tasks in R by using the `sf` package..

Use `pacman::p_load` to install and load sf and tidyverse

## **1.2 Data Acquisition**

Data are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. These data sources publicly available.

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)
-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)
-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)
-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

## **1.3 Getting Started**

For this exercise, two R packages will be used:

-   `sf` for importing, managing, and processing geospatial data

-   `tidyverse` for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:

-   `readr` for importing csv data

-   `readxl` for importing Excel worksheet

-   `tidyr` for manipulating data

-   `dplyr` for transforming data

-   `ggplot2` for visualising data

To install and load these packages into the R environment, we use the `p_load` function from the `pacman` package:

```{r}
pacman::p_load(sf,tidyverse)
```

The `p_load` function conveniently installs (if necessary) and loads the `sf` and `tidyverse` packages, making them readily available for use in our analysis.

## **1.4 Importing Geospatial Data into R**

In this section, you will learn how to import various geospatial data formats into R using the [`st_read()`](https://r-spatial.github.io/sf/reference/st_read.html) of `sf` package. The following datasets will be imported:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

### **1.4.1 Importing polygon feature data (shapefile format)**

The code below demonstrates how to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame using the `st_read()` function. When dealing with shapefiles, you need to specify two arguments: `dsn` (the data source path) and `layer` (the shapefile name). Note that you do not need to include file extensions like `.shp`, `.dbf`, `.prj`, or `.shx.`

```{r}
mpsz = st_read(dsn = "data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

This message indicates that the `mpsz` object is a simple feature data frame containing 323 multipolygon features and 15 fields, with the `SVY21` projected coordinate system. The bounding box provides the data's spatial extent.

### **1.4.2 Importing polyline feature data (Shapefile Format)**

The following code demonstrates how to import the `CyclingPath` shapefile into R as a line feature data frame:

```{r}
cyclingpath = st_read(dsn = "data/geospatial/CyclingPath_Jul2024", 
                         layer = "CyclingPathGazette")
```

This output reveals that the `cyclingpath` object is a simple feature data frame containing 3138 line features and 2 fields, with the same `SVY21` projected coordinate system.

### **1.4.3 Importing GIS data in (KML format)**

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

This message indicates that `preschool` is a point feature data frame with 2290 features and 2 fields, using the `WGS 84` geodetic coordinate system, different from the previous datasets.

## **1.5 Checking the Content of A Simple Feature Data Frame**

In this sub-section, we will use different ways to retrieve information related to the content of a simple feature data frame.

### **1.5.1 *Working with st_geometry()***

The geometry column in an `sf` data frame is a list of class `sfc.` To access the geometry list-column, we use a more general approach, the `st_geometry()` function, as shown below:

```{r}
st_geometry(mpsz)
```

This function will display basic information about the feature class, such as the geometry type, geographic extent, and coordinate system.

### **1.5.2 glimpse()**

The `glimpse()` function reveals the data type of each field, providing insight into the structure and contents of the data frame.

```{r}
glimpse(mpsz)
```

### **1.5.3 *head()***

If you need to examine the **complete information of a feature object**, the [`head()`](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) function in base R is helpful. It displays the first few records of the data frame:

```{r}
head(mpsz, n=5)  
```

The `head()` function is particularly useful for quickly inspecting a subset of the data.

## **1.6 Plotting the Geospatial Data**

In geospatial data science, **visualizing geospatial features** is crucial. The `plot()` function from base R allows you to quickly visualize these features:

```{r}
plot(mpsz)
```

By default, this function creates a multi-plot of all attributes. You can also plot only the geometry using:

```{r}
plot(st_geometry(mpsz))
```

Or plot the sf object based on a specific attribute:

```{r}
plot(mpsz["PLN_AREA_N"])
```

## **1.7 Working with Projection**

Map projection is a key aspect of geospatial data. To perform geoprocessing on two datasets, they must share the same coordinate system.

In this section, we will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **projection transformation**.

### **1.7.1 Assigning EPSG code to a simple feature data frame**

When importing geospatial data into R, the coordinate system might be missing or incorrectly assigned. You can check the coordinate system of a simple feature data frame using `st_crs()`:

This is an example the **coordinate system** of `mpsz` simple feature data frame by using *st_crs()* of *sf* package as shown in the code chunk below.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for `svy21` should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

Now, let us check the CSR again by using the code chunk below.

```{r}
st_crs(mpsz3414)
```

Notice that the EPSG code is 3414 now.

### **1.7.2 Transforming the projection of preschool from wgs84 to svy21**

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

```{r}
st_geometry(preschool)
```

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

Next, let us display the content of preschool3414 sf data frame as shown below.

```{r}
st_geometry(preschool3414)
```

## **1.8 Importing and Converting An Aspatial Data**

An example of aspatial data would be `listing` of inside Airbnb. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.

In this section, we will be importing an aspatial data into R environment and save it as a tibble data frame. Next, we will convert it into a simple feature data frame.

### **1.8.1 Importing the aspatial data**

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing, it's important to check that the data was imported correctly using `list()`:

```{r}
list(listings) 
```

### **1.8.2 Creating a simple feature data frame from an aspatial data frame**

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html) of `sf` packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.
-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](https://epsg.io/).
-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of `listing_sf`. Notice that a new column called `geometry` has been added into the data frame. On the other hand, the `longitude` and `latitude` columns have been dropped from the data frame.

## **1.9 Geoprocessing with sf package**

In this section, we will perform two commonly used geoprocessing functions, namely [buffering](https://www.gislounge.com/buffers-in-gis/) and point in polygon count.

### **1.9.1 Buffering**

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, [*st_buffer()*](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths

```{r, echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, sum() of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

**Mission Accomplished!**

### Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [st_intersects()](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [*length()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

**Calculating Density of Preschool by planning subzone**

Firstly, the code chunk below uses [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of **sf** package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## **1.10 Exploratory Data Analysis (EDA)**

In practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate [ggplot2](https://ggplot2.tidyverse.org/) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

**Using ggplot2 method to plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count:**

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
