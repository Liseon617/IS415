---
title: "Global and Local Measures of Spatial Autocorrelation"
author: "Brian Lim"
date: "September 19, 2024"
date-modified: "last-modified"
categories:
  - Analysis
  - R
  - sf
  - tmap
  - tidyverse
  - spatstat
  - spdep
  - knitr
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: true
---

## **6.1 Exercise Overview**

In this hands-on exercise will teach you how to compute both Global and Local Measures of Spatial Autocorrelation (GMSA & LMSA) using the `spdep` package in R. By the end of the exercise, you will be able to:

**Part 1: Global Measures of Spatial Autocorrelation (GMSA)** Global Measures of Spatial Autocorrelation (GMSA) provide a single summary statistic describing the overall spatial structure in a dataset. **Moran's I** is a commonly used statistic for GMSA. This part will guide you through computing and visualizing GMSA statistics.

**Part 2: Local Measures of Spatial Autocorrelation (LMSA)** Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surrounding areas. Unlike GMSA, LMSA provides detailed insights into local clusters and outliers. The most common LMSA statistic is **Local Indicators of Spatial Association (LISA)**, along with **Getis-Ord’s Gi-statistics** for hot and cold spot analysis.

## **6.2 Data Acquisition**

Two data sets will be used in this hands-on exercise, they are:

1.  Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.
2.  Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

## **6.3 Getting Started**

For this exercise, we will use the following 5 R packages:

-   [**sf**](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.

-   [**spdep**](https://cran.r-project.org/web/packages/spdep/), an R package focused on spatial dependence and spatial econometrics. It includes functions for computing spatial weights, neighborhood structures, and spatially lagged variables, which are crucial for understanding spatial relationships in data.

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html), a package for creating high-quality static and interactive maps, leveraging the Leaflet API for interactive visualizations.

-   [**tidyverse**](https://cran.r-project.org/web/packages/tidyverse/index.html), a collection of R packages designed for data science. It includes packages like `dplyr` for data manipulation, `ggplot2` for data visualization, and `tidyr` for data tidying, all of which are essential for handling and analyzing data efficiently in a clean and consistent manner.

To install and load these packages into the R environment, we use the `p_load` function from the `pacman` package:

```{r echo=TRUE, eval=TRUE, message=FALSE, warning=FALSE}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## **6.4 Importing Data into R**

In this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv format.

### **6.4.1 Import shapefile into r environment**

The code chunk below uses [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package to import Hunan shapefile into R. The imported shapefile will be **simple features** Object of **sf**.

```{r}
hunan <- st_read(dsn = "data/Hands-on_Ex05/geospatial", 
                 layer = "Hunan")
```

### **6.4.2 Import csv file into r environment**

Next, we will import *Hunan_2012.csv* into R by using *read_csv()* of **readr** package. The output is R dataframe class.

```{r}
hunan2012 <- read_csv("data/Hands-on_Ex05/aspatial/Hunan_2012.csv")
hunan2012
```

### **6.4.3 Performing relational join**

The code chunk below will be used to update the attribute table of *hunan*'s SpatialPolygonsDataFrame with the attribute fields of *hunan2012* data frame. This is performed by using *left_join()* of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012, join_by(County))%>%
  select(1:4, 7, 15)
```

## **6.5 Visualising Regional Development Indicator**

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal",
          palette = "viridis") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile",
          palette = "viridis") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

## **6.6 Global Measures of Spatial Autocorrelation**

In this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

### **6.6.1 Computing Contiguity Spatial Weights**

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.

In the code chunk below, [`poly2nb()`](https://r-spatial.github.io/spdep/reference/poly2nb.html) of **spdep** package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a "queen" argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don't specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

More specifically, the code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

The summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.

### **6.6.2 Row-standardised weights matrix**

Next, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(# of neighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we'll stick with the style="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: callout-note
### What can we learn from the code chunk above?

-   The input of [`nb2listw()`](https://r-spatial.github.io/spdep/reference/nb2listw.html) must be an object of class **nb**. The syntax of the function has two major arguments, namely style and zero.poly.
-   *style* can take values "W", "B", "C", "U", "minmax" and "S". B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).
-   If *zero policy* is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %\*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.
:::

## **6.7 Global Measures of Spatial Autocorrelation: Moran's I**

In this section, you will learn how to perform Moran's I statistics testing by using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

### **6.7.1 Maron's I test**

The code chunk below performs Moran's I statistical testing using [`moran.test()`](https://r-spatial.github.io/spdep/reference/moran.test.html) of **spdep**.

```{r}
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

::: {.callout-tip title="Conclusion"}
**Key Results:** 1. Moran’s I statistic = 0.30075 2. Expectation = -0.01149 3. Variance = 0.00435 4. Moran I statistic standard deviate = 4.7351 5. p-value = 1.095e-06

The **Moran’s I statistic = 0.30075** is positive, indicating **positive spatial autocorrelation**, meaning that regions with similar GDP per capita values are clustered together.

The **p-value = 1.095e-06** is extremely small, meaning there is very strong evidence against the null hypothesis of no spatial autocorrelation. We can **reject the null hypothesis** and conclude that **GDP per capita is spatially clustered** across the regions in the Hunan dataset.

In summary, the Moran's I test confirms the presence of statistically significant spatial clustering in GDP per capita in Hunan. Regions with high or low GDPPC tend to be near one another, rather than being randomly distributed.
:::

### **6.7.2 Computing Monte Carlo Moran's I**

The code chunk below performs permutation test for Moran's I statistic by using [`moran.mc()`](https://r-spatial.github.io/spdep/reference/moran.mc.html) of **spdep**. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

::: {.callout-tip title="Conclusion"}
**Key Results:**

1.  Statistic (Moran’s I) = 0.30075
2.  Observed rank = 1000
3.  p-value = 0.001

The Moran's I value of **0.30075** is positive, indicating **positive spatial autocorrelation**, meaning regions with similar levels of GDPPC tend to be near each other.

The **p-value = 0.001** is highly significant, meaning there is less than a 0.1% chance that this level of spatial autocorrelation is due to random chance. Therefore, **we reject the null hypothesis** of no spatial autocorrelation and conclude that **GDPPC** is spatially clustered in the Hunan region.

In summary, there is statistically significant evidence of spatial clustering in GDP per capita across the regions in the Hunan dataset.
:::

### **6.7.3 Visualising Monte Carlo Moran's I**

It is always a good practice for us the examine the simulated Moran's I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.

In the code chunk below [`hist()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist) and [`abline()`](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/abline) of R Graphics are used.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

::: {.callout-tip title="Observation"}
From the results provided, here's what can be observed:

1.  **Mean of simulated Moran's I**: The mean of the simulated Moran's I values (excluding the observed value) is **-0.01505**, which is close to 0. This suggests that under the null hypothesis (random distribution), Moran's I is expected to be around 0, indicating no spatial autocorrelation.

2.  **Variance**: The variance of the simulated Moran's I values is **0.00437**, which shows how much the simulated Moran's I values spread around the mean.

3.  **Summary Statistics**:

    -   **Minimum Moran's I = -0.18339**.

    -   **1st Quartile (25%) = -0.06168**.

    -   **Median (50%) = -0.02125**.

    -   **3rd Quartile (75%) = 0.02611**.

    -   **Maximum Moran's I = 0.27593**.

Together with the histogram of the simulated Moran's I values, this shows that most values are centered around 0, with a bell-shaped distribution, indicating that under random conditions, spatial autocorrelation is minimal or absent. However, the observed Moran’s I (red line in the histogram) is much larger than the bulk of the simulated values, which indicates significant positive spatial autocorrelation in the real data.
:::

Using ggplot2 package to plot the values:

```{r}
# Create a data frame for ggplot
simulated_data <- data.frame(simulated_morans_I = bperm$res)

# Plot using ggplot2
ggplot(simulated_data, aes(x = simulated_morans_I)) +
  geom_histogram(bins = 20, fill = "grey", color = "black") +  # Histogram with 20 bins
  geom_vline(xintercept = 0, color = "red", linetype = "solid") +  # Red line at 0
  labs(title = "Histogram of Simulated Moran's I",
       x = "Simulated Moran's I",
       y = "Frequency") +
  theme_minimal()  # Use a minimal theme for clean visuals
```

## **6.8 Global Measures of Spatial Autocorrelation: Geary's C**

In this section, you will learn how to perform Geary's C statistics testing by using appropriate functions of **spdep** package.

### **6.8.1 Geary's C test**

The code chunk below performs Geary's C test for spatial autocorrelation by using [`geary.test()`](https://r-spatial.github.io/spdep/reference/geary.test.html) of **spdep**.

```{r}
geary.test(hunan$GDPPC, listw=rswm_q)
```

::: {.callout-tip title="Observation"}
**Key Results:**

1.  **Geary's C statistic = 0.6907**

2.  **Expectation = 1.0000**

3.  **Variance = 0.0073364**

4.  **Geary C statistic standard deviate = 3.6108**

5.  **p-value = 0.0001526**

The observed **Geary's C statistic of 0.6907** is significantly lower than the expected value of 1, indicating **positive spatial autocorrelation**. The **p-value of 0.0001526** is very small, providing strong evidence to reject the null hypothesis of no spatial autocorrelation.

In conclusion, the Geary’s C test confirms that **there is significant positive spatial autocorrelation** in the GDP per capita values across the regions in Hunan. Similar GDPPC values tend to be clustered together spatially.
:::

### **6.8.2 Computing Monte Carlo Geary's C**

The code chunk below performs permutation test for Geary's C statistic by using [`geary.mc()`](https://r-spatial.github.io/spdep/reference/geary.mc.html) of **spdep**.

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

::: {.callout-tip title="Observation"}
1.  **Statistic**: The observed Geary's C statistic is approximately 0.69072. Geary's C is a measure of spatial autocorrelation, where values less than 1 indicate positive spatial autocorrelation (similar values clustered together).

2.  **Observed Rank**: The observed rank is 1, which means that the observed statistic is the smallest among the 999 simulated values.

3.  **P-value**: The p-value is 0.001, which is very low (typically, a threshold of 0.05 is used for significance). This suggests that the observed statistic is significantly lower than what would be expected under the null hypothesis of no spatial autocorrelation.

Given the low p-value, you can conclude that there is strong evidence against the null hypothesis, suggesting that there is significant positive spatial autocorrelation in the GDP per capita (GDPPC) data for Hunan. This implies that regions with similar GDPPC values tend to cluster together spatially.
:::

### **6.8.3 Visualising the Monte Carlo Geary's C**

Next, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.

```{r}
mean(bperm$res[1:999])
var(bperm$res[1:999])
summary(bperm$res[1:999])
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

::: {.callout-tip title="Observation"}
**Key Results**:

1.  **Minimum**: 0.7142

2.  **1st Quartile (Q1)**: 0.9502

3.  **Median**: 1.0052

4.  **Mean**: 1.0044

5.  **3rd Quartile (Q3)**: 1.0595

6.  **Maximum**: 1.2722

The median value being very close to the mean suggests a symmetric distribution of the simulated Geary's C values, which is further confirmed by the range of values (from 0.7142 to 1.2722).

**Histogram**: The histogram with the red vertical line at 1 visually illustrates the distribution of the simulated values. Most of the values appear to be above 1, reinforcing the observation of a tendency for dissimilar values to be spatially distributed.

Overall, these statistics suggest that while the observed Geary's C statistic (0.69072) indicates significant positive spatial autocorrelation, the simulated values are generally above 1, which points to dissimilar values being more likely to be near each other in space. This contrast emphasizes the clustering of similar GDPPC values in Hunan and indicates that the observed statistic is an extreme outcome under the null hypothesis of no spatial autocorrelation.
:::

## **6.9 Spatial Correlogram**

Spatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran's I or Geary's c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.

### **6.9.1 Compute Moran's I correlogram**

In the code chunk below, [`sp.correlogram()`](https://r-spatial.github.io/spdep/reference/sp.correlogram.html) of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran's I. The **plot()** of base Graph is then used to plot the output.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.

```{r}
print(MI_corr)
```

::: {.callout-tip title="Observation"}
There is strong positive spatial autocorrelation for lower lags (1, 2, and 3), suggesting that regions with similar GDPPC are spatially clustered. As the lag increases, this autocorrelation weakens and eventually becomes negative, indicating that regions with dissimilar GDPPC are more likely to be neighbors at larger spatial lags (5 and 6).
:::

### **6.9.1 Compute Geary's C correlogram and plot**

In the code chunk below, `sp.correlogram()` of **spdep** package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary's C. The **plot()** of base Graph is then used to plot the output.

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

Similar to the previous step, we will print out the analysis report by using the code chunk below.

```{r}
print(GC_corr)
```

## **6.10 Local Indicators of Spatial Association(LISA)**

Local Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.

In this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.

### **6.10.1 Computing local Moran's I**

To compute local Moran's I, the [*localmoran()*](https://r-spatial.github.io/spdep/reference/localmoran.html) function of **spdep** will be used. It computes *Ii* values, given a set of *zi* values and a listw object providing neighbour weighting information for the polygon associated with the zi values.

The code chunks below are used to compute local Moran's I of *GDPPC2012* at the county level.

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics
-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis
-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis
-   Z.Ii:the standard deviate of local moran statistic
-   Pr(): the p-value of local moran statistic

#### **6.10.1.1 Mapping the local Moran's I**

Before mapping the local Moran's I map, it is wise to append the local Moran's I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called *hunan.localMI*.

```{r, echo=TRUE, eval=TRUE}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

#### **6.10.1.2 Mapping local Moran's I values**

Using choropleth mapping functions of **tmap** package, we can plot the local Moran's I values by using the code chinks below.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

#### **6.10.1.3 Mapping local Moran's I p-values**

The choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.

The code chunks below produce a choropleth map of Moran's I p-values by using functions of **tmap** package.

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

#### **6.10.4 Mapping both local Moran's I values and p-values**

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r fig.width=12, fig.height=8}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

## **6.11 Creating a LISA Cluster Map**

The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### **6.11.1 Plotting Moran scatterplot**

The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.

The code chunk below plots the Moran scatterplot of GDPPC 2012 by using [*moran.plot()*](https://r-spatial.github.io/spdep/reference/moran.plot.html) of **spdep**.

```{r fig.width=6, fig.height=6}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

Notice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.

### **6.11.2 Plotting Moran scatterplot with standardised variable**

First we will use [*scale()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/scale) to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% 
  as.vector 
```

The [*as.vector()*](https://www.rdocumentation.org/packages/pbdDMAT/versions/0.5-1/topics/as.vector) added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.

Now, we are ready to plot the Moran scatterplot again by using the code chunk below.

```{r fig.width=6, fig.height=6}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

### **6.11.3 Preparing LISA map classes**

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
#| eval: false
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

Next, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.

```{r}
#| eval: false
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
```

This is follow by centering the local Moran's around the mean.

```{r}
#| eval: false
LM_I <- localMI[,1] - mean(localMI[,1])    
```

Next, we will set a statistical significance level for the local Moran.

```{r}
#| eval: false
signif <- 0.05       
```

These four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.

```{r}
#| eval: false
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4      
```

Lastly, places non-significant Moran in the category 0.

```{r}
#| eval: false
quadrant[localMI[,5]>signif] <- 0
```

In fact, we can combined all the steps into one single code chunk as shown below:

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
hunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)
DV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     
LM_I <- localMI[,1]   
signif <- 0.05       
quadrant[DV <0 & LM_I>0] <- 1
quadrant[DV >0 & LM_I<0] <- 2
quadrant[DV <0 & LM_I<0] <- 3  
quadrant[DV >0 & LM_I>0] <- 4    
quadrant[localMI[,5]>signif] <- 0
```

### **6.11.4 Plotting LISA map**

Now, we can build the LISA map by using the code chunks below.

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

The code chunk below will be used to create such visualisation.

```{r}
#| fig-width: 12
#| fig-height: 8
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, 
             asp=1, ncol=2)
```

We can also include the local Moran's I map and p-value map as shown below for easy comparison.

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 8
tmap_arrange(localMI.map, pvalue.map, 
             asp=1, ncol=2)
```

::: {.callout-tip title="Observation"}
The Local Indicators of Spatial Association (LISA) map consists of two panels, each providing different information about local spatial autocorrelation for GDPPC in the Hunan region:

### Left Panel: Local Moran's I Statistics

1.  **Spatial Clustering**:

    -   The regions are colored based on the value of Local Moran's I statistics. Areas with positive values indicate clustering of similar values (high-high or low-low), while negative values indicate spatial outliers (high-low or low-high).

    -   Darker green areas show strong positive autocorrelation (high-high clustering), indicating that regions with high GDPPC are surrounded by other regions with high GDPPC.

    -   The small orange region in the middle represents negative autocorrelation, indicating it is a spatial outlier with a lower GDPPC than its neighbors.

2.  **Spatial Outliers and Clusters**:

    -   Most of the regions are in the range of -1 to 1 (light yellow) indicating weak or no significant local spatial autocorrelation.

    -   Darker green regions are where significant positive clustering is observed, suggesting economic similarity in terms of GDPPC within these clusters.

### Right Panel: Local Moran's I p-values

1.  **Significance of Spatial Autocorrelation**:

    -   This panel displays the significance of the local Moran's I statistics. Darker blue colors represent regions with significant local spatial autocorrelation (lower p-values).

    -   The areas with the darkest blue (p \< 0.001) correspond to significant clusters of either high or low GDPPC. These regions are the same as those showing strong positive autocorrelation in the left panel (dark green areas).

2.  **Identification of Significant Clusters**:

    -   The map helps in identifying the most statistically significant clusters. The significant regions mostly match the dark green regions in the left panel, confirming that these clusters are not due to random spatial patterns but are statistically significant.

    -   Areas with lighter shades of blue (higher p-values) indicate non-significant local Moran's I values, implying no strong evidence for spatial autocorrelation in those regions.
:::

## **6.12 Hot Spot and Cold Spot Area Analysis**

Beside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.

The term 'hot spot' has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).

### **6.12.1 Getis and Ord's G-Statistics**

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

-   Deriving spatial weight matrix
-   Computing Gi statistics
-   Mapping Gi statistics

### **6.12.2 Deriving distance-based weight matrix**

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and
-   adaptive distance weight matrix.

#### **6.12.2.1 Deriving the centroid**

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running *st_centroid()* on the sf object: **us.bound**. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be *st_centroid()*. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the *st_centroid()* function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

#### **6.12.2.2 Determine the cut-off distance**

Firstly, we need to determine the upper limit for distance band by using the steps below:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.
-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).
-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.
-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

#### **6.12.2.3 Computing fixed distance weight matrix**

Now, we will compute the distance weight matrix by using [*dnearneigh()*](https://r-spatial.github.io/spdep/reference/dnearneigh.html) as shown in the code chunk below.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

The output spatial weights object is called `wm62_lw`.

### **6.12.3 Computing adaptive distance weight matrix**

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothe the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

Next, *nb2listw()* is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

## **6.13 Computing Gi statistics**

### **6.13.1 Gi statistics using fixed distance**

```{r echo=TRUE, eval=TRUE}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

The output of localG() is a vector of G or Gstar values, with attributes "gstari" set to TRUE or FALSE, "call" set to the function call, and class "localG".

The Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.

Next, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

In fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. *gi.fixed*) into r matrix object by using *as.matrix()*. Next, *cbind()* is used to join hunan\@data and *gi.fixed* matrix to produce a new SpatialPolygonDataFrame called *hunan.gi*. Lastly, the field name of the gi values is renamed to *gstat_fixed* by using *rename()*.

### **6.13.2 Mapping Gi values with fixed distance weights**

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r fig.width=12, fig.height=8}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

::: {.callout-tip title="Observation"}
The two maps in the LISA analysis show the distribution of GDPPC and the local Gi statistics for spatial clustering:

### Left Panel: GDPPC Distribution

1.  **GDPPC Range**:

    -   The regions are colored based on their GDPPC values, with darker colors representing higher GDPPC.

    -   The central-northern region has the highest GDPPC values (dark orange), while most other regions are in the lower to middle range of GDPPC (lighter colors).

2.  **GDPPC Clusters**:

    -   This map helps visualize which regions are wealthier relative to others, but it doesn't provide information on the spatial clustering of these values.

### Right Panel: Local Gi Statistics (Hot Spot Analysis)

1.  **Hot and Cold Spots**:

    -   The Gi statistic is used to identify "hot spots" (areas with high values surrounded by other high values) and "cold spots" (areas with low values surrounded by other low values).

    -   The regions in dark red and dark orange in the central-northern part represent statistically significant hot spots, indicating that these regions have high GDPPC values that are spatially clustered.

    -   Similarly, areas in blue represent cold spots, indicating regions with low GDPPC values surrounded by other low-value regions.

2.  **Significance of Clusters**:

    -   The darker the red or blue, the stronger the significance of the clustering (high Gi values for hot spots and low Gi values for cold spots).

    -   The central region shows the strongest hot spot with a local Gi value in the range of 5 to 6, signifying a very strong clustering of high GDPPC.

3.  **Spatial Patterns**:

    -   Hot spots are concentrated mainly in the central-northern part, which matches the high GDPPC regions in the left panel.

    -   Cold spots are scattered throughout, with notable clustering in the northwestern and southeastern parts of the map.
:::

### **6.13.3 Gi statistics using adaptive distance**

The code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e *knb_lw*).

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

### **6.13.4 Mapping Gi values with adaptive distance weights**

It is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of **tmap** package will be used to map the Gi values.

The code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.

```{r fig.width=12, fig.height=8}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

::: {.callout-tip title="Observation"}
From the Gi map (right side) in your visualization, the local Gi statistic is mapped to show spatial clusters of high or low values in comparison to surrounding areas. The Gi statistic helps identify statistically significant clusters, and it is commonly used to detect local spatial autocorrelation.

### Observations:

1.  **Hotspots** (Red areas): The red regions in the Gi map indicate statistically significant **positive spatial autocorrelation** or "hotspots," where high GDP per capita (GDPPC) values cluster together. This suggests that the areas in red (north-eastern region) have higher GDPPC and are surrounded by other high-GDPPC areas.

2.  **Coldspots** (Blue areas): The blue regions represent **negative spatial autocorrelation** or "coldspots," where low GDPPC values cluster together. These areas are likely experiencing lower economic activity relative to their neighbors. The most noticeable coldspot is in the southwest.

3.  **Neutral areas**: The lighter shades of blue and red indicate regions with no significant spatial autocorrelation, meaning that the GDPPC in these areas does not display a strong clustering pattern relative to nearby areas.
:::
