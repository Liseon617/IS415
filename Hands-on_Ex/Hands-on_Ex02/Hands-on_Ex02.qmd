---
title: "Hands-on Exercise 2"
author: "Brian Lim"
date: "August 23, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

## **2.1 Exercise Overview**

In this hands-on exercise, I learn how to create effective and accurate thematic/choropleth maps and other geospatial visualization techniques using the `tmap` package in R.

Thematic mapping is a technique that uses map symbols to visualize certain characteristics of geographic features that are not naturally visible, such as population, temperature, crime rates, and property values, among others.

Geovisualization, on the other hand, involves creating graphical representations to make a place, phenomenon, or process visible. This approach leverages the human brain's powerful spatial cognition abilities, linked to our eye-brain vision system, to better process and understand spatial information.

## **2.2 Data Acquisition**

Two data set will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e.`respopagesexfa2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

## **2.3 Getting Started**

For this exercise, the following R packages will be used:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.

As readr, tidyr and dplyr are part of tidyverse package. The code chunk below will suffice to install and load the required packages in RStudio.

To install and load these packages into the R environment, we use the `p_load` function from the `pacman` package:

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

The `p_load` function conveniently installs (if necessary) and loads the `sf` and `tidyverse` packages, making them readily available for use in our analysis.

## **2.4 Importing Data into R**

### **2.4.1 Importing Geospatial Data into R**

The following code demonstrates how to use the st_read() function from the sf package to import the MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame named mpsz:

```{r}
mpsz <- st_read(dsn = "data/geospatial/", 
                layer = "MP14_SUBZONE_WEB_PL")
```

We can examine the content of mpsz by using the code chunk below

```{r}
mpsz
```

The reason only the first 10 records are displayed by `mpsz` is due to its default behaviour. Using `head()` would allow for the number of display records to change according to the **n** value.

```{r}
head(mpsz, n = 5)
```

### **2.4.2 Importing Attribute Data into R**

Next, we will import the `respopagesexfa2011to2020.csv` file into the R environment and save it into an R dataframe called `popdata`. The task can be performed using the `read_csv()` function from the readr package, as shown below:

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")
```

### **2.4.3 Data Preparation**

Before creating a thematic map, it's necessary to prepare a data table with values from the year 2020. This table should include the following variables: PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.

-   YOUNG: Includes age groups from 0-4 up to 20-24.
-   ECONOMY ACTIVE: Includes age groups from 25-29 up to 60-64.
-   AGED: Includes age groups 65 and above.
-   TOTAL: Includes all age groups.
-   DEPENDENCY: The ratio between the young and aged populations against the economy active group.

#### **2.4.3.1 Data Wrangling**

The following data wrangling and transformation functions will be used:

-   **pivot_wider()** from the **tidyr** package.

-   **mutate()**, **filter()**, **group_by()**, and **select()** from the **dplyr** package.

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP)%>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[14])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+
rowSums(.[15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

#### **2.4.3.2 Joining the attribute data and geospatial data**

Before performing a georelational join, it's necessary to convert the values in the `PA` and `SZ` fields to uppercase. This is because these fields contain both uppercase and lowercase letters, while the corresponding fields `SUBZONE_N` and `PLN_AREA_N` are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, the `left_join()` function from the **dplyr** package is used to join the geospatial data and attribute table using `SUBZONE_N` and `SZ` as the common identifiers:

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

**Take note:** The `left_join()` function from the **dplyr** package is used with the `mpsz` simple feature data frame as the left data table to ensure that the output remains a simple features data frame.

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## **2.5 Choropleth Mapping Geospatial Data Using *tmap***

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

### **2.5.1 Plotting a choropleth map quickly by using *qtm()***

The quickest way to draw a choropleth map is using the `qtm()` function, which provides a good default visualization with minimal coding. Here's how you can use it:

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

### **2.5.2 Creating a choropleth map by using *tmap*’s elements**

While `qtm()` is useful for quickly drawing a choropleth map, it offers limited control over the aesthetics of individual layers. To create a high-quality cartographic choropleth map, you should use `tmap` elements like `tm_shape()`, `tm_fill()`, and `tm_borders()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
#### **2.5.2.1 Drawing a base map**

The foundation of a `tmap` visualization is `tm_shape()`, which is followed by layer elements like `tm_fill()` and `tm_polygons()`.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```
#### **2.5.2.2 Drawing a choropleth map using *tm_polygons()***

To create a choropleth map that shows the geographical distribution of a variable (e.g., `DEPENDENCY`) by planning subzone, assign the target variable to `tm_polygons()`.
```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

**Things to note with `tm_polygons()`:**

-   The default interval binning method is "pretty."

-   The default color scheme is "YlOrRd" from ColorBrewer.

-   Missing values are shaded in grey.

#### **2.5.2.3 Drawing a choropleth map using *tm_fill()* and *tm_border()***

`tm_polygons()` is essentially a wrapper for `tm_fill()` and `tm_border()`. `tm_fill()` colors the polygons, while `tm_borders()` adds the borders. Examine the difference in output between the 2 following code chunks:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1,  alpha = 1)
```

Notice that light-gray border lines have been added on the choropleth map with `tm_border().`

The *alpha* argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).

Beside *alpha* argument, there are three other arguments for *tm_borders()*, they are:

-   *col* = border colour,

-   *lwd* = border line width. The default is 1, and

-   *lty* = border line type. The default is “solid”.

### **2.5.3 Data classification methods of tmap**

Choropleth maps often involve data classification to group observations into ranges or classes. `tmap` offers ten classification methods, including "fixed," "sd," "equal," "pretty" (default), "quantile," "kmeans," "hclust," "bclust," "fisher," and "jenks."

#### **2.5.3.1 Plotting choropleth maps with built-in classification methods**

The following code demonstrates a quantile classification with 5 classes:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "quantile") +
  tm_borders(alpha = 0.5)
```
The equal classification method can be used as shown below:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "equal") +
  tm_borders(alpha = 0.5)
```
The fisher classification method can be used as shown below:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "fisher") +
  tm_borders(alpha = 0.5)
```
The sd classification method can be used as shown below:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "sd") +
  tm_borders(alpha = 0.5)
```
The hclust classification method can be used as shown below:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "hclust") +
  tm_borders(alpha = 0.5)
```
The jenks classification method can be used as shown below:
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          palette = "viridis",
          style = "jenks") +
  tm_borders(alpha = 0.5)
```
Additionally, we can try preparing choropleth maps by using similar classification methods (i.e. kmeans) but with differing number of classes. The following code chunks use kmeans clustering with different class sizes (2, 6, 10, 20)

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          palette = "viridis",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          palette = "viridis",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          palette = "viridis",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 20,
          palette = "viridis",
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```
#### **2.5.3.2 Plotting choropleth map with custom break**

For all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the *breaks* argument to the *tm_fill()*. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order).

Before we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of **DEPENDENCY** field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

With reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90 using the `breaks` argument. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)

Now, we will plot the choropleth map by using the code chunk below.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```
### **2.5.4 Colour Scheme**

`tmap` supports color ramps defined by the user or from the RColorBrewer package.

#### **2.5.4.1 Using ColourBrewer palette**

To change the color scheme, assign the desired palette to the `palette` argument of `tm_fill()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
```
To reverse the color scheme, add a "-" prefix.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "-Blues") +
  tm_borders(alpha = 0.5)
```
### **2.5.5 Map Layouts**

Map layout involves combining all map elements into a cohesive visualization, including the title, scale bar, compass, margins, and aspect ratios.

#### **2.5.5.1 Map Legend**

`tmap` provides several options for customizing the legend's placement, format, and appearance.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```
#### **2.5.5.2 Map style**

`tmap` allows you to change the map's layout settings using `tmap_style()`.

The code chunk below shows the classic style is used.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```
#### **2.5.5.3 Cartographic Furniture**

`tmap` also provides functions to add other map elements, such as a compass, scale bar, and grid lines.

In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```
To reset the default style, refer to the code chunk below.
```{r}
tmap_style("white")
```
### **2.5.6 Drawing Small Multiple Choropleth Maps**

#### **2.5.6.1 By assigning multiple values to at least one of the aesthetic arguments**

#### **2.5.6.2 By defining a group-by variable in *tm_facets()***

#### **2.5.6.3 By creating multiple stand-alone maps with *tmap_arrange()***

### **2.5.7 Mappping Spatial Object Meeting a Selection Criterion**
