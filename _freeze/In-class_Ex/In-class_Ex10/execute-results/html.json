{
  "hash": "48a3882a10ead7891817e8b8bee25993",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In Class exercise 10\"\nauthor: \"Brian Lim\"\ndate: \"October 21, 2024\"\ndate-modified: \"last-modified\"\ncategories:\n  - Analysis\n  - R\n  - sf\n  - tidyverse\n  - cluster\n  - ClustGeo\n  - NbClust\n  - GGally\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true  \n  cache: true\n---\n\n\n## 6.0 Loading the R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf <- read_rds(\"data/In-class_Ex09/rds/shan_sf.rds\")\nshan_ict <- read_rds(\"data/In-class_Ex09/rds/shan_ict.rds\")\nshan_sf_cluster <- read_rds(\"data/In-class_Ex09/rds/shan_sf_cluster.rds\")\n```\n:::\n\n\n## 6.1 Conventional Hierarchical Clustering\n\nIn R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using `dist()` of R.\n\n`dist()` supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski.** The default is euclidean proximity matrix.\n\nThe code chunk below is used to compute the proximity matrix using euclidean method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproxmat <- dist(shan_ict, method = \"euclidean\")\nhclust_ward <- hclust(proxmat, method = \"ward.D\")\ngroups <- as.factor(cutree(hclust_ward, k=6))\n```\n:::\n\n\n`hclust()` will take the proximity matrix to perform hierarchical clustering to create a hierarchical clustering object to get the the groups based on the `cutree(` method\n\nThis chunk of code is meant to tidy the `shan_sf_cluster` dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`CLUSTER`=`as.matrix.groups.`) %>%\n  select(-c(3:4, 7:9)) %>%\n  rename(TS = TS.x)\n```\n:::\n\n\nThis chunk of code to create the dendogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, k = 6, border = 2.5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-5-1.png){width=1536}\n:::\n:::\n\n\nThis chunk of code to create the cluster map of the `shan_sf_cluster` object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqtm(shan_sf_cluster, \"CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Spatially Constrained Clustering\n\n-   SKATER (Spatial 'K'luser Analysis by Tree Edge Removal) Alogrithm\n\n-   REDCAP (Reorganisation with dynamically\n\n-   ClustGeo Algorithm\n\n### SKATER Algorithm\n\nSpatially Constrained Clustering: SKATER Method\n\n1.  Computing nearest neighbours (Minimum Spanning Tree)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.nb <- poly2nb(shan_sf)\nsummary(shan.nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n```\n\n\n:::\n:::\n\n\n2.  Visualising the neighbours\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf),\n     border=grey(.5))\npts <- st_coordinates(st_centroid(shan_sf))\nplot(shan.nb, pts, col=\"blue\", add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n3.  Computing minimum spanning tree (MST)\n- Calculating edge costs\n\n::: {.cell}\n\n```{.r .cell-code}\nlcosts <- nbcosts(shan.nb, shan_ict)\n```\n:::\n\n- Incorporating these costs into a weights object\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.w <- nb2listw(shan.nb, lcosts, style = \"B\")\n\nsummary(shan.w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  9  7 21  4  3  5  1 \n5 least connected regions:\n3 5 7 9 47 with 2 links\n1 most connected region:\n8 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 76267.65 58260785 522016004\n```\n\n\n:::\n:::\n\n- Visualising MST\n\n::: {.cell}\n\n```{.r .cell-code}\nshan.mst <- mstree(shan.w)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), border=gray(.5))\nplot.mst(shan.mst, \n         pts, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles = 0.005, \n         add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\nComputing spatially constrained clusters using SKATER method\n\n::: {.cell}\n\n```{.r .cell-code}\nskater.clust6 <- skater(edges = shan.mst[,1:2],\n                        data = shan_ict,\n                        method = \"euclidean\",\n                        ncuts = 5)\n```\n:::\n\n\nThe following code chunk plots the skater tree\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(shan_sf), border=gray(.5))\nplot(skater.clust6, \n         pts, \n         cex.lab=.7,\n         groups.colors=c(\"red\", \"green\", \"blue\", \"brown\", \"pink\"),\n         cex.circles = 0.005, \n         add=TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n\nVisualising clusters in chloropeth map\n\n::: {.cell}\n\n```{.r .cell-code}\ngroups_mat<- as.matrix(skater.clust6$groups)\nshan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%\n  rename(`skater_CLUSTER` = `as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"skater_CLUSTER\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-15-1.png){width=1152}\n:::\n:::\n\n\n### ClustGeo Algoritm\n1. Compute Spatial Distance Matrix\nTo compute the distance matrix using st_distance() of sf package.\n\n::: {.cell}\n\n```{.r .cell-code}\ndist <- st_distance(shan_sf, shan_sf)\ndistmat <- as.dist(dist)\n```\n:::\n\n2. Cluster Graph\n\n::: {.cell}\n\n```{.r .cell-code}\ncr <- choicealpha(proxmat, distmat, \n                  range.alpha = seq(0, 1, 0.1), \n                  K=6, graph = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-17-1.png){width=1152}\n:::\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-17-2.png){width=1152}\n:::\n:::\n\n3. Saving ClustGeo Output\n\n::: {.cell}\n\n```{.r .cell-code}\nclustG <- hclustgeo(proxmat, distmat, alpha = 0.2)\ngroups <- as.factor(cutree(clustG, k=6))\nshan_sf_GclusterGeo <- cbind(shan_sf, as.matrix(groups)) %>%\n  rename(`clustGeo` = `as.matrix.groups.`)\n\nqtm(shan_sf_GclusterGeo, \"clustGeo\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-18-1.png){width=1152}\n:::\n:::\n\n\n4. Characterising the Clusters\n\n::: {.cell}\n\n```{.r .cell-code}\nggparcoord(data = shan_sf_GclusterGeo, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ clustGeo) + \n  theme(axis.text.x = element_text(angle = 30))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex10_files/figure-html/unnamed-chunk-19-1.png){width=1728}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}