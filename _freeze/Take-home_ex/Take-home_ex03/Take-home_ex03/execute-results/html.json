{
  "hash": "fa70d27cf3cd9497a184c3285d266f30",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Exercise 3: Geographically Weighted Predictive Models: Rental price prediction based on location based data\"\nauthor: \"Brian Lim\"\ndate: \"Octor 27, 2024\"\ndate-modified: \"last-modified\"\ncategories:\n  - Analysis\n  - R\n  - sf\n  - spdep \n  - tmap\n  - tidyverse \n  - GWmodel\n  - SpatialML \n  - rsample \n  - Metrics\n  - olsrr\nformat: html\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  cache.lazy: true\n---\n\n\n\n## 3.1 Overview\n\nIn this take-home exercise, I will focus on prototyping a Geographically Weighted Predictive Model for my group’s Shiny App. This model allows users to input specific values for key variables and obtain rental price predictions for HDB flats in Singapore. The model considers variables such as flat type, proximity to kindergartens and MRT stations, the number of childcare centers within 500 meters, and distance to amenities like hawker centers, shopping malls, primary schools, and the CBD. By capturing these localized effects, the predictive model provides a user-friendly, data-driven tool for estimating monthly rent based on a flat’s characteristics and surrounding environment. The data preparation and Exploratory Data Analysis were handled by my groupmate, so for this exercise, I will load the data directly from an RDS file. For this exercise, I will load the prepared dataset directly from an RDS file for efficient model testing.\n\n## 3.2 Getting Started\n\nFor this exercise, the following R packages will be used:\n\n-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data.\n\n-   [**spdep**](https://cran.r-project.org/web/packages/spdep/index.html) for spatial dependence analysis, including computing spatial weights and conducting spatial autocorrelation tests such as Moran's I and Geary's C\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html), a package for creating high-quality static and interactive maps, leveraging the Leaflet API for interactive visualizations.\n\n-   [**tidyverse**](https://www.tidyverse.org/) for performing data science tasks such as importing, wrangling and visualising data.\n\n-   [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/) provides techniques from a particular branch of spatial statistics,termed geographically-weighted (GW) models. GW models suit situations when data are not described well by some global model, but where there are spatial regions where a suitably localised calibration provides a better description.\n\n-   [**SpatialML**](https://cran.r-project.org/web/packages/SpatialML) for a geographically weighted random forest regression including a function to find the optical bandwidth.\n\n-   [**rsample**](https://cran.r-project.org/web/packages/rsample) to create and summarize different types of resampling objects.\n\n-   [**Metrics**](https://cran.r-project.org/web/packages/Metrics) implements metrics for regression, time series, binary classification, classification, and information retrieval problems.\n\n-   [**olsrr**](https://www.rdocumentation.org/packages/olsrr/versions/0.6.0) provides tools for building OLS regression models using R\n\nAs readr, tidyr and dplyr are part of tidyverse package. The code chunk below will suffice to install and load the required packages in RStudio.\n\nTo install and load these packages into the R environment, we use the `p_load` function from the `pacman` package:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, GWmodel, SpatialML, rsample, Metrics, olsrr)\n```\n:::\n\n\n\n## 3.3 Importing Data into R\n\nWe will first import the rental dataset prepared by one of my teammates. Please refer to [here](https://is415-gaa-georgia-ng.netlify.app/take-home_ex/take-home_ex03/take-home_ex03) for the details of the data wrangling.\n\n-   **`rental.sf`** =\\> contains the rental data from Jan 2020 to Sept 2024, as well as other fields like:\n\n    -   Dependent:\n\n        -   **Monthly Rental fee**: `monthly_rent`\n\n    -   Continuous:\n\n        -   **Proximity measure**: kindergarten, childcare, hawker, bus stops, shopping mall, mrt, primary schools, cbd\n\n        -   **Count of amenities within specific distance**: kindergarten, childcare, hawker, bus stops, shopping mall,\n\n    -   Categorical:\n\n        -   **Flat Type**: `flat_type`\n\n        -   **Town**: `town`\n\n        -   **Region**: `region`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrental_sf <- read_rds(\"data/rds/rental_sf.rds\")\n```\n:::\n\n\n\nPrimarily, we will be working with numerical values to determine the variable correlations they have with `monthly_rent`. Based on the summary results below, we will first focus on the following columns:\n\n1\\. **no_of_kindergarten_500m**\n\n2\\. **prox_kindergarten**\n\n3\\. **no_of_childcare_500m**\n\n4\\. **prox_childcare**\n\n5\\. **no_of_hawker_500m**\n\n6\\. **prox_hawker**\n\n7\\. **no_of_busstop_500m**\n\n8\\. **prox_busstop**\n\n9\\. **no_of_shoppingmall_1km**\n\n10\\. **prox_shoppingmall**\n\n11\\. **prox_mrt**\n\n12\\. **prox_prisch**\n\n13\\. **prox_cbd**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(rental_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n rent_approval_date       town            flat_type          monthly_rent \n Min.   :2024-01-01   Length:25713       Length:25713       Min.   : 500  \n 1st Qu.:2024-03-01   Class :character   Class :character   1st Qu.:2700  \n Median :2024-05-01   Mode  :character   Mode  :character   Median :3100  \n Mean   :2024-04-29                                         Mean   :3102  \n 3rd Qu.:2024-07-01                                         3rd Qu.:3500  \n Max.   :2024-09-01                                         Max.   :6500  \n          geometry        region          no_of_kindergarten_500m\n POINT        :25713   Length:25713       Min.   : 0.000         \n epsg:3414    :    0   Class :character   1st Qu.: 1.000         \n +proj=tmer...:    0   Mode  :character   Median : 2.000         \n                                          Mean   : 1.912         \n                                          3rd Qu.: 3.000         \n                                          Max.   :11.000         \n prox_kindergarten no_of_childcare_500m prox_childcare    no_of_hawker_500m\n Min.   :   0.0    Min.   : 0.000       Min.   :   0.00   Min.   :0.0000   \n 1st Qu.: 171.7    1st Qu.: 6.000       1st Qu.:  71.08   1st Qu.:0.0000   \n Median : 272.0    Median : 8.000       Median : 117.53   Median :0.0000   \n Mean   : 296.6    Mean   : 8.495       Mean   : 126.71   Mean   :0.6711   \n 3rd Qu.: 390.5    3rd Qu.:10.000       3rd Qu.: 170.96   3rd Qu.:1.0000   \n Max.   :3196.7    Max.   :28.000       Max.   :2952.48   Max.   :5.0000   \n  prox_hawker       no_of_busstop_500m  prox_busstop    no_of_shoppingmall_1km\n Min.   :   6.981   Min.   : 3.00      Min.   : 15.43   Min.   : 0.00         \n 1st Qu.: 301.816   1st Qu.:12.00      1st Qu.: 73.62   1st Qu.: 1.00         \n Median : 530.754   Median :15.00      Median :107.18   Median : 2.00         \n Mean   : 672.403   Mean   :15.28      Mean   :114.66   Mean   : 1.78         \n 3rd Qu.: 907.293   3rd Qu.:18.00      3rd Qu.:145.81   3rd Qu.: 3.00         \n Max.   :2867.630   Max.   :32.00      Max.   :391.47   Max.   :16.00         \n prox_shoppingmall    prox_mrt         prox_prisch        prox_cbd    \n Min.   :   0.0    Min.   :   9.112   Min.   :   0.0   Min.   :  722  \n 1st Qu.: 388.7    1st Qu.: 250.080   1st Qu.: 249.3   1st Qu.: 7412  \n Median : 617.7    Median : 423.233   Median : 385.4   Median :11340  \n Mean   : 689.8    Mean   : 495.644   Mean   : 443.9   Mean   :10956  \n 3rd Qu.: 920.1    3rd Qu.: 666.385   3rd Qu.: 557.4   3rd Qu.:14314  \n Max.   :3222.7    Max.   :3446.893   Max.   :3293.3   Max.   :19758  \n```\n\n\n:::\n:::\n\n\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using `initial_split()` of **rsample** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrental_split <- initial_split(rental_sf, \n                              prop = 6.5/10,)\ntrain_data <- training(rental_split)\ntest_data <- testing(rental_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/rds/model/train_data.rds\")\nwrite_rds(test_data, \"data/rds/model/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/rds/model/train_data.rds\")\ntest_data <- read_rds(\"data/rds/model/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrental_nogeo <- rental_sf %>%\n  select(7:19) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\nAs we are more interested in predicting rental prices of property based on different locations across Singpaore, we will start by examining the only numeric independent values of the `rental.sf` data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(rental_nogeo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"no_of_kindergarten_500m\" \"prox_kindergarten\"      \n [3] \"no_of_childcare_500m\"    \"prox_childcare\"         \n [5] \"no_of_hawker_500m\"       \"prox_hawker\"            \n [7] \"no_of_busstop_500m\"      \"prox_busstop\"           \n [9] \"no_of_shoppingmall_1km\"  \"prox_shoppingmall\"      \n[11] \"prox_mrt\"                \"prox_prisch\"            \n[13] \"prox_cbd\"               \n```\n\n\n:::\n:::\n\n\n\n## 3.4 Computing Correlation Matrix\n\nBefore loading the predictors into a predictive model, it is always a good practice to use correlation matrix to examine if there is sign of multicolinearity.\n\nThe code chunk below is used to plot a scatterplot matrix of the relationship between the independent variables in `rental.sf` data.frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot::corrplot(cor(rental_nogeo), \n                   diag = FALSE, \n                   order = \"AOE\",\n                   tl.pos = \"td\", \n                   tl.cex = 0.5, \n                   method = \"number\", \n                   type = \"upper\")\n```\n\n::: {.cell-output-display}\n![](Take-home_ex03_files/figure-html/unnamed-chunk-9-1.png){width=1152}\n:::\n:::\n\n\n\n\nAfter viewing the various correlation matrices above, all the correlation values are below 0.8. Hence, there is no sign of multicolinearity.\n\n## 3.5 Building a non-spatial multiple linear regression\n\nWe will now go about building a non-spatial multi-linear regression. Given that `flat_type` is categorical and has been shown to significantly impact rental prices, it’s appropriate to retain it. Variables like `flat_type` have proven theoretical and empirical justification for their inclusion based on their substantial effect on monthly rental price.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/rds/model/train_data.rds\")\ntest_data <- read_rds(\"data/rds/model/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nrental_price_mlr <- lm(monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + prox_kindergarten +\n                  no_of_childcare_500m + no_of_hawker_500m + prox_childcare +\n                  prox_hawker + no_of_busstop_500m + prox_busstop + \n                  no_of_shoppingmall_1km + prox_shoppingmall +\n                  prox_mrt + prox_prisch +\n                  prox_cbd,\n                data=train_data)\n\nsummary(rental_price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = monthly_rent ~ flat_type + no_of_kindergarten_500m + \n    prox_kindergarten + no_of_childcare_500m + no_of_hawker_500m + \n    prox_childcare + prox_hawker + no_of_busstop_500m + prox_busstop + \n    no_of_shoppingmall_1km + prox_shoppingmall + prox_mrt + prox_prisch + \n    prox_cbd, data = train_data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-3062.83  -286.72    65.87   348.22  2720.83 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)              3.229e+03  3.497e+01  92.323  < 2e-16 ***\nflat_type4-ROOM          6.540e+02  1.026e+01  63.763  < 2e-16 ***\nflat_type5-ROOM          9.203e+02  1.195e+01  77.030  < 2e-16 ***\nno_of_kindergarten_500m  8.559e+00  3.788e+00   2.260  0.02385 *  \nprox_kindergarten       -8.094e-02  2.959e-02  -2.735  0.00624 ** \nno_of_childcare_500m    -7.138e+00  1.541e+00  -4.633 3.64e-06 ***\nno_of_hawker_500m       -8.987e-01  6.881e+00  -0.131  0.89609    \nprox_childcare          -2.000e-02  5.015e-02  -0.399  0.69011    \nprox_hawker             -6.219e-02  1.140e-02  -5.457 4.92e-08 ***\nno_of_busstop_500m       9.605e-01  1.110e+00   0.866  0.38677    \nprox_busstop             7.130e-02  7.997e-02   0.892  0.37263    \nno_of_shoppingmall_1km  -2.101e+00  3.687e+00  -0.570  0.56886    \nprox_shoppingmall       -8.636e-02  1.476e-02  -5.849 5.03e-09 ***\nprox_mrt                -1.063e-01  1.391e-02  -7.642 2.25e-14 ***\nprox_prisch              4.032e-02  1.674e-02   2.408  0.01606 *  \nprox_cbd                -3.886e-02  1.179e-03 -32.962  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 547.7 on 16697 degrees of freedom\nMultiple R-squared:  0.3144,\tAdjusted R-squared:  0.3137 \nF-statistic: 510.3 on 15 and 16697 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nBased on the coefficient section, we can see that not all the independent variables are statistically significant, and some variables can be removed from our model based on their p-value field (Pr \\> 0.05).\n\nThe following variables should be removed from the model due to their high p-values, indicating they are not statisitically significant predictors of monthly rent:\n\n**1. no_of_hawker_500m (p = 0.89609)**\n\n**2. prox_childcare (p = 0.69011)**\n\n**3. no_of_busstop_500m (p = 0.38677)**\n\n**4. prox_busstop (p = 0.37263)**\n\n**5. no_of_shoppingmall_1km (p = 0.56886)**\n\nNow we will update the model by removing the 5 variables\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nrental_price_mlr <- lm(formula = monthly_rent ~ flat_type + no_of_kindergarten_500m + prox_kindergarten +\n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_prisch + prox_cbd, \n                 data = train_data)\n\n# Display the publication-quality table\nols_regress(rental_price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                           Model Summary                             \n--------------------------------------------------------------------\nR                         0.561       RMSE                  547.483 \nR-Squared                 0.314       MSE                299935.128 \nAdj. R-Squared            0.314       Coef. Var              17.672 \nPred R-Squared            0.313       AIC                258215.452 \nMAE                     412.938       SBC                258308.139 \n--------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                      Sum of                                                    \n                     Squares           DF      Mean Square       F         Sig. \n--------------------------------------------------------------------------------\nRegression    2295968877.016           10    229596887.702    765.488    0.0000 \nResidual      5009516507.263        16702       299935.128                      \nTotal         7305485384.279        16712                                       \n--------------------------------------------------------------------------------\n\n                                            Parameter Estimates                                             \n-----------------------------------------------------------------------------------------------------------\n                  model        Beta    Std. Error    Std. Beta       t        Sig        lower       upper \n-----------------------------------------------------------------------------------------------------------\n            (Intercept)    3240.088        23.849                 135.858    0.000    3193.341    3286.834 \n        flat_type4-ROOM     654.702        10.195        0.484     64.215    0.000     634.718     674.686 \n        flat_type5-ROOM     921.148        11.884        0.600     77.510    0.000     897.853     944.443 \nno_of_kindergarten_500m       8.553         3.704        0.019      2.309    0.021       1.293      15.813 \n      prox_kindergarten      -0.085         0.027       -0.023     -3.152    0.002      -0.138      -0.032 \n   no_of_childcare_500m      -6.901         1.502       -0.038     -4.594    0.000      -9.845      -3.956 \n            prox_hawker      -0.062         0.010       -0.047     -6.449    0.000      -0.081      -0.043 \n      prox_shoppingmall      -0.084         0.012       -0.051     -7.117    0.000      -0.107      -0.061 \n               prox_mrt      -0.106         0.014       -0.054     -7.699    0.000      -0.133      -0.079 \n            prox_prisch       0.038         0.017        0.016      2.297    0.022       0.006       0.070 \n               prox_cbd      -0.039         0.001       -0.269    -35.002    0.000      -0.041      -0.036 \n-----------------------------------------------------------------------------------------------------------\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip title=\"Interpretation\"}\n1.  **Model Performance**:\n    -   The R-squared value is 0.314, indicating that about 31.4% of the variability in monthly rent is explained by the model. While it shows some predictive capability, other factors might still influence rental prices.\n2.  **Key Predictors**:\n    -   **Significant Variables**: The predictors with low p-values (e.g., flat type, number of kindergartens, proximity to hawker centers, shopping malls, MRT stations, primary schools, and CBD) significantly influence monthly rent.\n    -   **Noteworthy Coefficients**:\n        -   `flat_type`: Larger room types (4-ROOM, 5-ROOM) show substantial positive impacts on monthly rent.\n        -   `prox_cbd`: Rent decreases as distance from the CBD increases, with each unit increase in distance reducing the monthly rent by about 0.039.\n3.  **Model Error and Diagnostics**:\n    1.  **RMSE**: 547.5, suggesting a reasonable prediction accuracy\n    2.  **MAE**: 412.9, reflecting an average prediction error of about \\$413\n:::\n\n## 3.6 Constructing the adaptive bandwidth gwr model\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel. First we use `bw.gwr()` of **GWmodel** package to determine the optimal bandwidth to be used\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(train_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 16713 \nextent      : 11597.31, 45192.3, 28097.64, 48741.06  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 18\nnames       : rent_approval_date,       town, flat_type, monthly_rent,         region, no_of_kindergarten_500m,    prox_kindergarten, no_of_childcare_500m,       prox_childcare, no_of_hawker_500m,      prox_hawker, no_of_busstop_500m,     prox_busstop, no_of_shoppingmall_1km, prox_shoppingmall, ... \nmin values  :              19723, ANG MO KIO,    3-ROOM,          500, CENTRAL REGION,                       0, 6.59828462646688e-05,                    0, 6.26024982260832e-06,                 0,  6.9808810867684,                  3, 15.4274594853233,                      0,                 0, ... \nmax values  :              19967,     YISHUN,    5-ROOM,         6500,    WEST REGION,                      11,      3196.6660398211,                   28,     2952.47979062617,                 5, 2867.63031236184,                 32, 391.470766976464,                     16,  3222.67183763499, ... \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nbw_adaptive <- bw.gwr(monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + prox_kindergarten +\n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_prisch + prox_cbd,\n                  data=train_data_sp,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive, \"data/rds/model/bw_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/rds/model/bw_adaptive.rds\")\nbw_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 184\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip title=\"Inisghts\"}\n1.  **Optimal Bandwidth:**\n\n-   Here, the optimal adaptive bandwidth is found to be **184** (based on the lowest CV score of **4484696643**).\n-   This bandwidth indicates that for each local regression in the GWR model, the 184 nearest neighbors are included, providing a balance between capturing spatial variation and maintaining model stability.\n:::\n\nAfter identifying the optimal adaptive bandwidth (`bw_adaptive`) for running a Geographically Weighted Regression (GWR) with cross-validation, we use this `bw_adaptive` value in the next step with `gwr.basic` will allow you to fit the GWR model itself.\n\nIn short, this step allows you to create a spatially-varying model, which helps identify how different factors contribute to `monthly_rent` differently across locations.\n\nNow we can to calibrate the gwr-based hedonic pricing model using adaptive bandwidth and gaussian kernel.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ngwr_adaptive <- gwr.basic(formula = monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + prox_kindergarten +\n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_prisch + prox_cbd,\n                  data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive, \"data/rds/model/gwr_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- read_rds(\"data/rds/model/gwr_adaptive.rds\")\n```\n:::\n\n\n\nThis code produces the GWR model using the adaptive bandwidth previously calculated. Running this step is essential for performing the actual localized regression analysis and obtaining spatially varying coefficients, which will reveal how the influence of each predictor on rental prices varies across the area. This model will give you insights into spatial patterns in rental prices, helping you to understand which factors are most significant in different locations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-03 00:38:14.363774 \n   Call:\n   gwr.basic(formula = monthly_rent ~ flat_type + no_of_kindergarten_500m + \n    prox_kindergarten + no_of_childcare_500m + prox_hawker + \n    prox_shoppingmall + prox_mrt + prox_prisch + prox_cbd, data = train_data_sp, \n    bw = bw_adaptive, kernel = \"gaussian\", adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  monthly_rent\n   Independent variables:  flat_type no_of_kindergarten_500m prox_kindergarten no_of_childcare_500m prox_hawker prox_shoppingmall prox_mrt prox_prisch prox_cbd\n   Number of data points: 16713\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n     Min       1Q   Median       3Q      Max \n-3060.57  -286.94    66.18   348.38  2725.20 \n\n   Coefficients:\n                             Estimate Std. Error t value Pr(>|t|)    \n   (Intercept)              3.240e+03  2.385e+01 135.858  < 2e-16 ***\n   flat_type4-ROOM          6.547e+02  1.020e+01  64.215  < 2e-16 ***\n   flat_type5-ROOM          9.211e+02  1.188e+01  77.510  < 2e-16 ***\n   no_of_kindergarten_500m  8.553e+00  3.704e+00   2.309  0.02095 *  \n   prox_kindergarten       -8.478e-02  2.690e-02  -3.152  0.00162 ** \n   no_of_childcare_500m    -6.901e+00  1.502e+00  -4.594 4.38e-06 ***\n   prox_hawker             -6.226e-02  9.654e-03  -6.449 1.16e-10 ***\n   prox_shoppingmall       -8.396e-02  1.180e-02  -7.117 1.15e-12 ***\n   prox_mrt                -1.062e-01  1.379e-02  -7.699 1.45e-14 ***\n   prox_prisch              3.800e-02  1.655e-02   2.297  0.02165 *  \n   prox_cbd                -3.863e-02  1.104e-03 -35.002  < 2e-16 ***\n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 547.7 on 16702 degrees of freedom\n   Multiple R-squared: 0.3143\n   Adjusted R-squared: 0.3139 \n   F-statistic: 765.5 on 10 and 16702 DF,  p-value: < 2.2e-16 \n   ***Extra Diagnostic information\n   Residual sum of squares: 5009516507\n   Sigma(hat): 547.5158\n   AIC:  258215.5\n   AICc:  258215.5\n   BIC:  241711.8\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 184 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                  Min.     1st Qu.      Median     3rd Qu.\n   Intercept               -4.1239e+03  2.2785e+03  2.9224e+03  3.3464e+03\n   flat_type4.ROOM          1.5958e+02  4.7323e+02  5.8078e+02  7.1121e+02\n   flat_type5.ROOM          3.3315e+02  7.3309e+02  8.7484e+02  1.0579e+03\n   no_of_kindergarten_500m -4.4557e+02 -3.1163e+01 -3.5370e+00  1.3943e+01\n   prox_kindergarten       -2.7091e+00 -1.9117e-01  2.9232e-02  2.1290e-01\n   no_of_childcare_500m    -7.8560e+01 -6.0831e+00  2.5467e+00  1.1740e+01\n   prox_hawker             -6.8246e-01 -1.0095e-01  3.7093e-02  2.0007e-01\n   prox_shoppingmall       -1.3366e+00 -1.4787e-01 -5.2000e-02  5.9172e-02\n   prox_mrt                -2.4673e+00 -3.2010e-01 -1.8481e-01 -6.2536e-02\n   prox_prisch             -1.1783e+00 -1.1478e-01  1.6581e-02  1.1858e-01\n   prox_cbd                -1.0204e+00 -6.5047e-02 -1.0502e-02  3.4669e-02\n                                 Max.\n   Intercept               10751.4755\n   flat_type4.ROOM          1196.1883\n   flat_type5.ROOM          1495.6959\n   no_of_kindergarten_500m   112.0738\n   prox_kindergarten           0.6535\n   no_of_childcare_500m      107.6404\n   prox_hawker                 1.5006\n   prox_shoppingmall           1.4020\n   prox_mrt                    0.7157\n   prox_prisch                 1.2324\n   prox_cbd                    0.9232\n   ************************Diagnostic information*************************\n   Number of data points: 16713 \n   Effective number of parameters (2trace(S) - trace(S'S)): 585.6495 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 16127.35 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 256327.1 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 255849.9 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 243063.8 \n   Residual sum of squares: 4238886846 \n   R-square value:  0.4197666 \n   Adjusted R-square value:  0.3986946 \n\n   ***********************************************************************\n   Program stops at: 2024-11-03 00:39:34.720698 \n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip title=\"Insights\"}\nThis analysis captures how each variable's impact on rental prices varies across different spatial locations. Here’s a breakdown of the key results:\n\n### 1. **Global Regression Results**\n\nSignificant variables (based on p-values \\< 0.05) include: - **flat_type**: Different flat types significantly impact rental prices. - Proximity to various facilities (e.g., **prox_kindergarten**, **prox_hawker**, **prox_shoppingmall**, **prox_mrt**, **prox_cbd**) also shows significant impact, with proximity to the Central Business District (`prox_cbd`) having a strong negative effect.\n\n### 2. **GWR Results**\n\n-   **Adaptive Bandwidth**: The optimal bandwidth is 184, determined via cross-validation. This bandwidth allows the model to capture spatially varying relationships, adjusting the number of nearest neighbors for each location.\n\n-   **prox_cbd** has a median negative effect but varies across locations, indicating that distance to the CBD does not uniformly affect rental prices.\n\n-   **Insignificant Features:** All of the features listed have p-values less than 0.05, indicating that they are statistically significant. However, if you're looking for features that are less impactful:\n\n1.  prox_kindergarten: p = 0.00162\n2.  prox_prisch: p = 0.02165\n\n-   **R-squared**: 0.4198, indicating that the GWR model explains around 41.98% of the variance in rental prices—an improvement over the global model.\n-   **AICc**: 256327.1, which is lower than the global model's AIC, suggesting a better fit when accounting for spatial variation.\n\n### 3. **Diagnostics**\n\n-   **Residual Sum of Squares (RSS)**: Lower in GWR (4238886846 vs. 5009516507 in the global model), indicating better fit.\n-   **Adjusted R-squared**: 0.3987 for GWR, higher than the global model’s, suggesting improved explanatory power.\n\nThe GWR model thus captures complex spatial heterogeneity in rental price determinants, which would be missed by a non-spatial global regression model.\n:::\n\n## 3.7 Preparing coordinates data\n\n### 3.7.1 Extracting coordinates data\n\nWe will then retrieve `x` and `y` coordinates for all datasets (full, training, and test) using `st_coordinates()`, essential for spatial analysis and spatial modeling.\n\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(rental_sf)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"data/rds/model/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/rds/model/coords_test.rds\" )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- read_rds(\"data/rds/model/coords_train.rds\" )\ncoords_test <- read_rds(\"data/rds/model/coords_test.rds\" )\n```\n:::\n\n\n\n### 3.7.2 Data Preparation\n\nFirst, we convert the categorical data related columns to factors within both the `train_data` and `test_data`. This informs R that these are nominal categories, and they can be handled correctly in the model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data$flat_type <- as.factor(train_data$flat_type)\ntrain_data$town <- as.factor(train_data$town)\ntrain_data$region <- as.factor(train_data$region)\n\ntest_data$flat_type <- as.factor(test_data$flat_type)\ntest_data$town <- as.factor(test_data$town)\ntest_data$region <- as.factor(test_data$region)\n```\n:::\n\n\n\nWe will then drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package. This prepares the data for modeling while keeping the spatial information separate.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n## 3.8 Calibrating Models\n\nIn this section, we will calibrate a model to predict HDB rental price by using `grf()` of [**SpatialML**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n### 3.8.1 Calibrating using training data\n\nBased on the output of the initial GWR model (gwr_adaptive), all of the features listed have p-values less than **0.05**, indicating that they are statistically significant. However, if you're looking for features that are less impactful, you can consider examining the magnitude of the coefficients alongside their p-values:\n\n1.  prox_kindergarten: Coefficient = -0.08478 (indicating a negative relationship, but relatively low impact)\n2.  prox_prisch: Coefficient = 0.03800 (also showing a weak relationship)\n\n### 3.8.2 Calibrating Random Forest (RF) Model\n\nIn this section, we will calibrate a model to predict HDB rental price by using random forest function of [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf_cal <- ranger(monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + \n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_cbd,\n             data=train_data)\nrf_cal\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf_cal, \"data/rds/model/rf_cal.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_cal <- read_rds(\"data/rds/model/rf_cal.rds\")\n```\n:::\n\n\n\n### 3.8.3 Calibrating Random Forest (RF) Model with Tuned Hyperparameters\n\nIn this section, we will calibrate a model to predict HDB rental price by using random forest function and utilizing the most important predictors to focus on those that have the strongest relationships with rental price. By recalibrating based on variable importance, this approach seeks to improve both prediction accuracy and model interpretability.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf_tuned <- ranger(monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + \n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_cbd,\n             data=train_data,\n             importance = \"permutation\",\n             mtry = 3,\n             min.node.size=10)\nrf_tuned\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf_tuned, \"data/rds/model/rf_tuned.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_tuned <- read_rds(\"data/rds/model/rf_tuned.rds\")\n```\n:::\n\n\n\n### 3.8.4 Calibrating Geographical Random Forest (GRF) Model\n\nThe code chunk below calibrate a geographic random forest model by using `grf()` of **SpatialML** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngwRF_adaptive <- grf(formula = monthly_rent ~ \n                  flat_type + no_of_kindergarten_500m + \n                  no_of_childcare_500m + prox_hawker + prox_shoppingmall +\n                  prox_mrt + prox_cbd,\n                  dframe=train_data, \n                  bw=70,                   # Broader bandwidth\n                  kernel=\"adaptive\",\n                  ntree=350,\n                  coords=coords_train,\n                  min.node.size=10)  \n```\n:::\n\n\n\nLet's save the model output by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwRF_adaptive, \"data/rds/model/gwRF_adaptive.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive <- read_rds(\"data/rds/model/gwRF_adaptive.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_adaptive\n```\n:::\n\n\n\n::: {.callout-tip title=\"Notes\"}\nCalibrating 3 random forest models would give the user more options in determining how their HDB rental prices are predicted\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/rds/model/train_data_mod.rds\")\nwrite_rds(test_data, \"data/rds/model/test_data_mod.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/rds/model/train_data_mod.rds\")\ntest_data <- read_rds(\"data/rds/model/test_data_mod.rds\")\n```\n:::\n\n\n\n## 3.9 Predicting by using test data\n\n### 3.9.1 Preparing the test data\n\nTo prepare the test data for prediction, the test data is combined with the coordinates, and unnecessary geometry information is removed to streamline the dataset for the model.\n\nThe code chunk below will be used to combine the test data with its corresponding coordinates data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine test data with coordinates and drop geometry\ntest_data <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n\n\nNext, we verify that the test data contains all required variables:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the required variables\nrequired_vars <- c(\"flat_type\", \"no_of_kindergarten_500m\", \n                   \"no_of_childcare_500m\", \"prox_hawker\", \n                   \"prox_shoppingmall\", \"prox_mrt\", \"prox_cbd\", \"X\", \"Y\")\n\n# Check which required variables are missing\nmissing_vars <- setdiff(required_vars, names(test_data))\nif (length(missing_vars) > 0) {\n  print(paste(\"Missing variables:\", paste(missing_vars, collapse = \", \")))\n} else {\n  print(\"All required variables are present.\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"All required variables are present.\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntest_data_subset <- test_data[, required_vars, drop = FALSE]\n```\n:::\n\n\n\n### 3.9.2 Predicting with test data\n\nUsing the trained Random Forest models, rf_cal and rf_tuned, we proceed with rental value predictions on the test data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_cal <- predict(rf_cal, data = test_data_subset)\nrf_pred_tuned <- predict(rf_tuned, data = test_data_subset)\n```\n:::\n\n\n\nNext, `predict.grf()` of spatialML package will be used to predict the rental value by using the test data and gwRF_adaptive model calibrated earlier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwRF_pred <- predict.grf(gwRF_adaptive, \n                           test_data_subset, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n\n\nBefore moving on, let us save the output into rds files for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf_pred_cal, \"data/rds/model/rf_pred_cal.rds\")\nwrite_rds(rf_pred_tuned, \"data/rds/model/rf_pred_tuned.rds\")\nwrite_rds(gwRF_pred, \"data/rds/model/GRF_pred.rds\")\n```\n:::\n\n\n\n### 3.9.3 Formatting Prediction Outputs\n\nThe output of the `predict()` and `predict.grf()` is a vector of predicted values. We will convert it into a data frame for further visualisation and analysis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_cal <- read_rds(\"data/rds/model/rf_pred_cal.rds\")\nrf_pred_tuned <- read_rds(\"data/rds/model/rf_pred_tuned.rds\")\ngwRF_pred <- read_rds(\"data/rds/model/GRF_pred.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_cal <- as.data.frame(rf_pred_cal)\nrf_pred_tuned <- as.data.frame(rf_pred_tuned)\nGRF_pred_df <- as.data.frame(gwRF_pred)\n```\n:::\n\n\n\nIn the code chunk below, `cbind()` is used to append the predicted values onto test_data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_rpc <- cbind(test_data, rf_pred_cal)\ntest_data_rpt <- cbind(test_data, rf_pred_tuned)\ntest_data_gp <- cbind(test_data, GRF_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(test_data_rpc, \"data/rds/model/test_data_rpc.rds\")\nwrite_rds(test_data_rpt, \"data/rds/model/test_data_rpt.rds\")\nwrite_rds(test_data_gp, \"data/rds/model/test_data_gp.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_rpc <- read_rds(\"data/rds/model/test_data_rpc.rds\")\ntest_data_rpt <- read_rds(\"data/rds/model/test_data_rpt.rds\")\ntest_data_gp <- read_rds(\"data/rds/model/test_data_gp.rds\")\n```\n:::\n\n\n\n### 3.9.4 Evaluating Model Accuracy with RMSE and MAE\n\nThe Root Mean Square Error (RMSE) and Mean Absolute Error (MAE) are used to assess the accuracy of the predictions by comparing the predicted values with the actual monthly rent.\n\n#### 3.9.4.1 Accuracy of Random Forest (RF) Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_rpc$monthly_rent, \n     test_data_rpc$prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 543.6913\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmae(test_data_rpc$monthly_rent, \n     test_data_rpc$prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 409.7593\n```\n\n\n:::\n:::\n\n\n\n#### 3.9.4.2 Accuracy of Random Forest (RF) Model with Tuned Hyperparameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_rpt$monthly_rent, \n     test_data_rpt$prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 538.4702\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmae(test_data_rpt$monthly_rent, \n     test_data_rpt$prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 406.2413\n```\n\n\n:::\n:::\n\n\n\n#### 3.9.4.3 Accuracy of Geographical Random Forest (GRF) Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmse(test_data_gp$monthly_rent, \n     test_data_gp$gwRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 573.2705\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmae(test_data_gp$monthly_rent, \n     test_data_gp$gwRF_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 431.0546\n```\n\n\n:::\n:::\n\n\n\n### 3.9.5 Visualising the predicted values\n\nTo better visually assess model performance and make better comparisons between the models, scatterplots display the relationship between predicted and actual values. A well-performing model will show points clustering along the diagonal, indicating strong alignment between predictions and observations.\n\nPrior to creating the plots, we would first identify and remove duplicate columns (if any exist).\n\n#### 3.9.5.1 Random Forest (RF) Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicate_columns <- names(test_data_rpc)[duplicated(names(test_data_rpc))]\ntest_data_rpc <- test_data_rpc[, !duplicated(names(test_data_rpc))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_rpc, aes(x = prediction, y = monthly_rent)) +\n  geom_point(alpha = 0.6, color = \"blue\") +  # Adjust point transparency and color\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", linetype = \"dashed\") +  # Best fit line\n  labs(title = \"Predicted Monthly Rent vs. Geographically Weighted RF Predictions\",\n       x = \"Geographically Weighted RF Predictions\",\n       y = \"Monthly Rent\")\n```\n\n::: {.cell-output-display}\n![](Take-home_ex03_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_minimal() + \n  theme(plot.title = element_text(hjust = 0.5),  # Center the title\n        axis.title = element_text(size = 12),  # Increase axis title size\n        axis.text = element_text(size = 10))   # Increase axis text size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 12\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : num 10\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\n#### 3.9.5.2 Random Forest (RF) Model with Tuned Hyperparameters\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicate_columns <- names(test_data_rpt)[duplicated(names(test_data_rpt))]\ntest_data_rpt <- test_data_rpt[, !duplicated(names(test_data_rpt))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_rpt, aes(x = prediction, y = monthly_rent)) +\n  geom_point(alpha = 0.6, color = \"blue\") +  # Adjust point transparency and color\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", linetype = \"dashed\") +  # Best fit line\n  labs(title = \"Predicted Monthly Rent vs. Geographically Weighted RF Predictions\",\n       x = \"Geographically Weighted RF Predictions\",\n       y = \"Monthly Rent\")\n```\n\n::: {.cell-output-display}\n![](Take-home_ex03_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_minimal() + \n  theme(plot.title = element_text(hjust = 0.5),  # Center the title\n        axis.title = element_text(size = 12),  # Increase axis title size\n        axis.text = element_text(size = 10))   # Increase axis text size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 12\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : num 10\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\n#### 3.9.5.3 Geographical Random Forest (GRF) Model\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nduplicate_columns <- names(test_data_gp)[duplicated(names(test_data_gp))]\ntest_data_gp <- test_data_gp[, !duplicated(names(test_data_gp))]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = test_data_gp, aes(x = gwRF_pred, y = monthly_rent)) +\n  geom_point(alpha = 0.6, color = \"blue\") +  # Adjust point transparency and color\n  geom_smooth(method = \"lm\", se = TRUE, color = \"red\", linetype = \"dashed\") +  # Best fit line\n  labs(title = \"Predicted Monthly Rent vs. Geographically Weighted RF Predictions\",\n       x = \"Geographically Weighted RF Predictions\",\n       y = \"Monthly Rent\")\n```\n\n::: {.cell-output-display}\n![](Take-home_ex03_files/figure-html/unnamed-chunk-59-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  theme_minimal() + \n  theme(plot.title = element_text(hjust = 0.5),  # Center the title\n        axis.title = element_text(size = 12),  # Increase axis title size\n        axis.text = element_text(size = 10))   # Increase axis text size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 136\n $ line                            :List of 6\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ lineend      : chr \"butt\"\n  ..$ arrow        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n $ rect                            :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : chr \"black\"\n  ..$ linewidth    : num 0.5\n  ..$ linetype     : num 1\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ text                            :List of 11\n  ..$ family       : chr \"\"\n  ..$ face         : chr \"plain\"\n  ..$ colour       : chr \"black\"\n  ..$ size         : num 11\n  ..$ hjust        : num 0.5\n  ..$ vjust        : num 0.5\n  ..$ angle        : num 0\n  ..$ lineheight   : num 0.9\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : logi FALSE\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ title                           : NULL\n $ aspect.ratio                    : NULL\n $ axis.title                      :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : num 12\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.top                :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.x.bottom             : NULL\n $ axis.title.y                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num 90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.title.y.left               : NULL\n $ axis.title.y.right              :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : num -90\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text                       :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : chr \"grey30\"\n  ..$ size         : num 10\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 1\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.top                 :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : NULL\n  ..$ vjust        : num 0\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.x.bottom              : NULL\n $ axis.text.y                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 1\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.y.left                : NULL\n $ axis.text.y.right               :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.text.theta                 : NULL\n $ axis.text.r                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0.5\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n  .. ..- attr(*, \"unit\")= int 8\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ axis.ticks                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.ticks.x                    : NULL\n $ axis.ticks.x.top                : NULL\n $ axis.ticks.x.bottom             : NULL\n $ axis.ticks.y                    : NULL\n $ axis.ticks.y.left               : NULL\n $ axis.ticks.y.right              : NULL\n $ axis.ticks.theta                : NULL\n $ axis.ticks.r                    : NULL\n $ axis.minor.ticks.x.top          : NULL\n $ axis.minor.ticks.x.bottom       : NULL\n $ axis.minor.ticks.y.left         : NULL\n $ axis.minor.ticks.y.right        : NULL\n $ axis.minor.ticks.theta          : NULL\n $ axis.minor.ticks.r              : NULL\n $ axis.ticks.length               : 'simpleUnit' num 2.75points\n  ..- attr(*, \"unit\")= int 8\n $ axis.ticks.length.x             : NULL\n $ axis.ticks.length.x.top         : NULL\n $ axis.ticks.length.x.bottom      : NULL\n $ axis.ticks.length.y             : NULL\n $ axis.ticks.length.y.left        : NULL\n $ axis.ticks.length.y.right       : NULL\n $ axis.ticks.length.theta         : NULL\n $ axis.ticks.length.r             : NULL\n $ axis.minor.ticks.length         : 'rel' num 0.75\n $ axis.minor.ticks.length.x       : NULL\n $ axis.minor.ticks.length.x.top   : NULL\n $ axis.minor.ticks.length.x.bottom: NULL\n $ axis.minor.ticks.length.y       : NULL\n $ axis.minor.ticks.length.y.left  : NULL\n $ axis.minor.ticks.length.y.right : NULL\n $ axis.minor.ticks.length.theta   : NULL\n $ axis.minor.ticks.length.r       : NULL\n $ axis.line                       : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.line.x                     : NULL\n $ axis.line.x.top                 : NULL\n $ axis.line.x.bottom              : NULL\n $ axis.line.y                     : NULL\n $ axis.line.y.left                : NULL\n $ axis.line.y.right               : NULL\n $ axis.line.theta                 : NULL\n $ axis.line.r                     : NULL\n $ legend.background               : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing                  : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n $ legend.spacing.x                : NULL\n $ legend.spacing.y                : NULL\n $ legend.key                      : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.key.size                 : 'simpleUnit' num 1.2lines\n  ..- attr(*, \"unit\")= int 3\n $ legend.key.height               : NULL\n $ legend.key.width                : NULL\n $ legend.key.spacing              : 'simpleUnit' num 5.5points\n  ..- attr(*, \"unit\")= int 8\n $ legend.key.spacing.x            : NULL\n $ legend.key.spacing.y            : NULL\n $ legend.frame                    : NULL\n $ legend.ticks                    : NULL\n $ legend.ticks.length             : 'rel' num 0.2\n $ legend.axis.line                : NULL\n $ legend.text                     :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : 'rel' num 0.8\n  ..$ hjust        : NULL\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.text.position            : NULL\n $ legend.title                    :List of 11\n  ..$ family       : NULL\n  ..$ face         : NULL\n  ..$ colour       : NULL\n  ..$ size         : NULL\n  ..$ hjust        : num 0\n  ..$ vjust        : NULL\n  ..$ angle        : NULL\n  ..$ lineheight   : NULL\n  ..$ margin       : NULL\n  ..$ debug        : NULL\n  ..$ inherit.blank: logi TRUE\n  ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n $ legend.title.position           : NULL\n $ legend.position                 : chr \"right\"\n $ legend.position.inside          : NULL\n $ legend.direction                : NULL\n $ legend.byrow                    : NULL\n $ legend.justification            : chr \"center\"\n $ legend.justification.top        : NULL\n $ legend.justification.bottom     : NULL\n $ legend.justification.left       : NULL\n $ legend.justification.right      : NULL\n $ legend.justification.inside     : NULL\n $ legend.location                 : NULL\n $ legend.box                      : NULL\n $ legend.box.just                 : NULL\n $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n  ..- attr(*, \"unit\")= int 1\n $ legend.box.background           : list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ legend.box.spacing              : 'simpleUnit' num 11points\n  ..- attr(*, \"unit\")= int 8\n  [list output truncated]\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi TRUE\n - attr(*, \"validate\")= logi TRUE\n```\n\n\n:::\n:::\n\n\n\n::: {.callout-tip title=\"Notes\"}\nWith the different predictive models, users can choose the model that best fits their specific needs, depending on their requirements for accuracy, interpretability, or spatial relevance. Each model provides distinct benefits:\n\n1.  **Standard Random Forest (RF)**: Offers a straightforward approach, balancing interpretability and predictive power with little calibration. It's useful for users looking for a quick and reliable model without the need for significant adjustments.\n\n2.  **Tuned Random Forest (RF with Tuned Hyperparameters)**: By focusing on the most impactful predictors and fine-tuning parameters like `mtry` and `min.node.size`, this model aims to achieve higher prediction accuracy. This is ideal for users who want an optimized model for maximum performance.\n\n3.  **Geographic Random Forest (GRF)**: The geographically weighted RF model accounts for spatial differences in predictor effects, making it ideal for predictions where location plays a critical role, such as real estate or environmental modeling. Users interested in localized predictions would find this model particularly beneficial.\n:::\n\n### 3.9.6 Summary and Practical Application\n\nEach calibrated model provides a different lens through which HDB rental prices can be understood and predicted. For practical application:\n\n-   **For general insights**, the Standard RF model may suffice.\n-   **For users seeking finer accuracy** in specific feature relationships, the Tuned RF model provides a refined approach.\n-   **For users interested in spatial variation**, the GRF model offers insights into how geographical context influences rent, making it highly applicable to real estate forecasting.\n\n### 3.9.7 UI Design\n\n#### 3.9.7.1 Scatterplot Model Analysis\n\nUsers would be able to explore the scatterplot model analysis of the various models. This setup allows users to visualise the comparison of RF models directly within the main panel and reference selection guidance. Only one plot is shown at a time, based on their selection, so as to not overwhelm them.\n\n![](images/clipboard-1541024995.png)\n\n#### 3.9.7.2 Predictive Models\n\nThe guide section provides users with step-by-step instructions on how to navigate the UI, making the interface more intuitive.\n\nThe side panel (and the Map section for Geospatial model types) would simulate the functions of a calculator, where users would be able to input certain aspects of the their ideal HDB rental location to determine a likely monthly rental cost. Together this would provide users with a clearer understanding of how to interact with the tool and a polished output section for viewing predictions\n\nThis approach aims to provide a dynamic and intuitive way to input model parameters and view rental price predictions for different HDB flats in Singapore.\n\n#### Aspatial Model Type\n\n![](images/clipboard-1190366593.png)\n\n#### Geospatial Model Type\n\n![](images/clipboard-173143110.png)\n",
    "supporting": [
      "Take-home_ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}