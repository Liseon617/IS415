---
title: "In Class exercise 10"
author: "Brian Lim"
date: "October 21, 2024"
date-modified: "last-modified"
categories:
  - Analysis
  - R
  - sf
  - tidyverse
  - cluster
  - ClustGeo
  - NbClust
  - GGally
format: html
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true  
  cache: true
---

## 6.0 Loading the R packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)
```

```{r}
shan_sf <- read_rds("data/In-class_Ex09/rds/shan_sf.rds")
shan_ict <- read_rds("data/In-class_Ex09/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/In-class_Ex09/rds/shan_sf_cluster.rds")
```

## 6.1 Conventional Hierarchical Clustering

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using `dist()` of R.

`dist()` supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski.** The default is euclidean proximity matrix.

The code chunk below is used to compute the proximity matrix using euclidean method.

```{r}
proxmat <- dist(shan_ict, method = "euclidean")
hclust_ward <- hclust(proxmat, method = "ward.D")
groups <- as.factor(cutree(hclust_ward, k=6))
```

`hclust()` will take the proximity matrix to perform hierarchical clustering to create a hierarchical clustering object to get the the groups based on the `cutree(` method

This chunk of code is meant to tidy the `shan_sf_cluster` dataset

```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER`=`as.matrix.groups.`) %>%
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```

This chunk of code to create the dendogram

```{r, fig.height=8, fig.width=16}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2.5)
```

This chunk of code to create the cluster map of the `shan_sf_cluster` object

```{r, fig.height=10, fig.width=10}
qtm(shan_sf_cluster, "CLUSTER")
```

## Spatially Constrained Clustering

-   SKATER (Spatial 'K'luser Analysis by Tree Edge Removal) Alogrithm

-   REDCAP (Reorganisation with dynamically

-   ClustGeo Algorithm

### SKATER Algorithm

Spatially Constrained Clustering: SKATER Method

1.  Computing nearest neighbours (Minimum Spanning Tree)

```{r}
shan.nb <- poly2nb(shan_sf)
summary(shan.nb)
```

2.  Visualising the neighbours

```{r}
plot(st_geometry(shan_sf),
     border=grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, pts, col="blue", add=TRUE)
```

3.  Computing minimum spanning tree (MST)
- Calculating edge costs
```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```
- Incorporating these costs into a weights object
```{r}
shan.w <- nb2listw(shan.nb, lcosts, style = "B")

summary(shan.w)
```
- Visualising MST
```{r}
shan.mst <- mstree(shan.w)
```
```{r, fig.height=12, fig.width=12}
plot(st_geometry(shan_sf), border=gray(.5))
plot.mst(shan.mst, 
         pts, 
         col="blue", 
         cex.lab=0.7, 
         cex.circles = 0.005, 
         add=TRUE)
```
Computing spatially constrained clusters using SKATER method
```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2],
                        data = shan_ict,
                        method = "euclidean",
                        ncuts = 5)
```

The following code chunk plots the skater tree
```{r, fig.height=12, fig.width=12}
plot(st_geometry(shan_sf), border=gray(.5))
plot(skater.clust6, 
         pts, 
         cex.lab=.7,
         groups.colors=c("red", "green", "blue", "brown", "pink"),
         cex.circles = 0.005, 
         add=TRUE)
```
Visualising clusters in chloropeth map
```{r, fig.height=12, fig.width=12}
groups_mat<- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER` = `as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

### ClustGeo Algoritm
1. Compute Spatial Distance Matrix
To compute the distance matrix using st_distance() of sf package.
```{r}
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```
2. Cluster Graph
```{r, fig.height=12, fig.width=12}
cr <- choicealpha(proxmat, distmat, 
                  range.alpha = seq(0, 1, 0.1), 
                  K=6, graph = TRUE)
```
3. Saving ClustGeo Output
```{r, fig.height=12, fig.width=12}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clustG, k=6))
shan_sf_GclusterGeo <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`clustGeo` = `as.matrix.groups.`)

qtm(shan_sf_GclusterGeo, "clustGeo")
```

4. Characterising the Clusters
```{r, fig.height=12, fig.width=18}
ggparcoord(data = shan_sf_GclusterGeo, 
           columns = c(17:21), 
           scale = "globalminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```
